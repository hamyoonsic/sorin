//오늘의 리뷰
//9월 6일 화요일

//잘한거 쿼리셀렉터 tbody에 걸기 
//확신없는 부분에 try catch걸기

//아쉬운거 html구조에 기대는 코드 작성
//반복되는 부분 전역변수로 빼서 사용하기
//변수선언 방식 일반적인 방식사용

//보완하기 쿼리셀렉터로 tbody클릭이벤트시 내가 원하는거 말고 tbody영역 아무거나 클릭하면 작동되기 때문에
//if문, event.target으로 내가 원하는 부분 클릭했을때만 작동하도록 조건걸어놓기

화살표함수

onclick = () => {} 오래된 방법 온클릭사용하면 이벤트를 한번밖에 매핑이 안댐
누군가 나의 클릭이벤트에 다가 중복으로 이벤트를 추가하면 먼저 만든 내 이벤트가 사라지고 덮어씌우기 댐
그래서 addEventListener를 사용하는 것

addEventListener 는 STACK이랑 비슷한 방식

check[i].checked = allcheck == true;

if(allcheck == true){
    check[i].checked = true ;
}

//위아래 똑같은 의미

변수 키워드는 var / const / let 등 하나만 꾸준하게 쓰는게 좋다

보통은 const, let을 사용많이 한다

var도 의도가 있으면 괜찮다 ex(변수스코프가 function를 사용할 경우)

const / let  == { } block scope


location.reload() 귀찮아서 쓰는경우 있다 == 바로 나
개발자는 간단하지만 사용자는 모든 데이터소스 캐싱 안된건 다 가져와야하는 불편함이 있다

특히 소스가 큰 사이트는 리로드가 더 밸루



로컬스토리지 인덱스 관리

input의 check된것만 루프돌려서 element 그리고 element.value 일케 하네

//

**화살표함수 / 그냥함수 차이**
function(event) 잘 안씀 // 언제쓰냐면 this쓸때 ....
화살표함수는 생성자도 못씀

항상 자바스크립트를 쓸때 브라우저에서 지원하는 문법인지 먼저 찾아보라
mdn에 들어가보면 나옴 (브라우저 서포트)
 


localStorage.key(i)     // object.keys(i); 비슷한 의미 (값 취득하기)

로컬스토리지는 객체구조이기는 하지만 오브젝트메서드보다는 로컬스토리지 메서드가 안정적임


innerText textContent 차이 get으로 취득하면

textContent = 노드에서만 사용가능 / 먼저만들어져서 호환성이 좋음 / 공백도 그대로 사용
innerText = element에서 사용가능 / 공백 알아서 없애줌 

td는 노드이면서 엘리먼트?...그래서 둘다 사용가능

//-----------------------------------------------------------------------------------------


<데이터 관리 어찌 하고 있나>
** 로컬 스토리지 키/ 밸류 각각 어떻게 관리하는지 ! **


배열의 0번째 1번째 이렇게 사용할 경우 자꾸 위에 올라가서 배열이 뭔지 봐야하니
객체의 키값을 잘 사용해서 어느정도 유추가능하게 작성하기


e.target.checked e = 이벤트 즉 내가 클릭한 이벤트

//
this / e.target 차이 (자주 사용함)

div onclick="das"
    button>adsadsa<
div

this = div태그가 나옴 (온클릭이 div에 있기 때문에)
e.target = button 이 나옴 ( 클릭한 대상 값)



 .forEach는 return으로 안멈춤
 멈추려면 
 try {
    
 } catch (error) {
    
 }

 사용해서 에러를 던져서 일부러 멈추게하기 (에러 걸리면 try코드 다 멈추고 catch절로 이동되기때문)


 $(document).ready(function(){}); $(function(){}) 제이쿼리 1 2 3 버전
 보통 1버전을 많이 사용한다 2 3은 별차이 없고 1버전에서는 뒤에 표현이 더 해석이 빠르다
 두개 동시에 쓰면 뒤에 표현이 먼저 출력

checkbox는 onclick보다는 onchange 쓰면 좋음 이유는 멀름

js에서 replace는 처음 만나는 것만 바꿔주는것 ( 모든 태그를 바꿔주지 않음)

만약 하려면 정규식으로 사용해야함

정규식뒤에 g는 해당하는 모든 것을 찾아보라
g가 없으면 한 건만 찾음
g플래그



제이쿼리 취약점  1버전은 보안 취약

(function() {})();

전역변수 쓰기 부담스러우면 fn을 하나의 블럭으로 두고 ex)회원가입전용 전역변수 선언하면 좋다
그리고 블럭을 여러개 사용하기


innerHTML은 내용을 바꾸는 메서드라서 잘못쓰면 기존의 입력값 다 날라감

배열 거꾸로 돌리기
for(let i=0; i<Array.length; i--;){

}

for(let i=5; i--;) 이런 반복문의 경우 여기서 i--; 는 조건식 5 4 3 2 1 0 //0되면서 false나오고 루프 끝


element.parentElement 의 경우 프론트에서 html구조바꾸면 작동안함

html코드 구조에 기대지 않는게 좋다

data-*

HTML5부터 태그에 내가 원하는 속성을 줄 수 있다
<tr data=dasdas>
</tr>

그래서 나중에 속성선택자로 찾기 쉬움



//---------------------------------------------------------------------------------------------------------------------

***스트링으로 찾는거랑 엘리먼트이름으로 찾는 것 (html 구조에 기대는)***



메소드 이용해서 el찾는건 루프 밖에다가 하는게 좋다

다른사람들 코드는 항목이 바뀌면 받기 힘든데

회원가입부분에 오브젝트 어쩌구로 받으면 데이터 항목이 바뀌어도 받을 수 있다 (어떤데이터를 받을 지 모르기 떄문에 다 받도록 설계)



|| [];

var origin = JSON.parse(localStorage.getItem('user_arr')) || [];


변수명 자바스크립트에서는 보통 카멜표기법
user변수는 보통 User 유저는 u 대문자
_user = _로시작하면 건드리지 말자는 프라이빗한 의미

계속나오는 표현은 전역변수로 선언해두기


null도 하나의 값이기 때문에 try에 걸려서 origin부분 오류남

if null일 경우에 에러 던지기로 나갑시다

루프돌면서 삭제하면 인덱스가 떙겨지면서 다른 데이터가 삭제될 수 있습니다.

--

delete 키워드
오브젝트 쪽에 써주는게 좋다
{} new Object()

배열같은 경우는 스플라이스로 제거하는게 좋다.


tbody 클릭 이벤트의 경우 내가원하는td 에서말고 th에서도 걸릴 수 있기대문에

if(event.target.classList.contains('check')) 실제로 내가 누른 대상을 조건으로 걸기

테스트할때는 value로 박아놓기 팁


제이쿼리에서는
$('tbody','check').on('click', function(event){});
더 편하게 사용할 수 있음
